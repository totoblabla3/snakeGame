{"version":3,"sources":["components/uiKit/Food/Food.module.css","components/uiKit/Snake/Snake.jsx","components/uiKit/Food/Food.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","styled","div","dot","oldLength","i","oldDot","keyframes","moveVertically","speed","Snake","length","snake","map","key","Food","food","className","c","Food_dot","style","left","top","UP","DOWN","RIGHT","LEFT","getRandomCoordinates","Math","floor","MAP_SIZE","random","EntryState","direction","items","copyObj","obj","JSON","parse","stringify","App","state","_onKeyDown","e","window","event","newDirection","keyCode","setState","alert","setInterval","_mouveSnake","this","document","onkeydown","_checkBorder","_checkSnakeCollapse","_eatFood","head","_gameOver","pop","forEach","item","unshift","newLength","push","shift","width","height","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.896961b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Food_dot\":\"Food_Food_dot__pDaQx\"};","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst moveVertically = (dot, oldDot) =>\n  keyframes`\n    0% {\n        left: ${oldDot[0]}%;\n        top: ${oldDot[1]}%\n    }\n    100% {\n      left: ${dot[0]}%;\n      top: ${dot[1]}%\n    }\n`;\n\nconst Item = styled.div`\n    position: absolute;\n    width: 3.6%;\n    height: 3.6%;\n    background-color: #88c586;\n    border: 2px solid #424645;\n    margin: 0.4%;\n    z-index: 2;\n    left: ${({ dot }) => dot[0]}%;\n    top: ${({ dot }) => dot[1]}%;\n    animation-name : ${(({ dot, oldLength, i }) => moveVertically(dot, oldLength[i] || [oldLength[i - 1]]))};\n    animation-duration: ${({speed}) => speed / 1000}s;\n    animation-timing-function: linear\n`\n\nexport const Snake = ({ length, oldLength, speed }) => {\n  const snake = length.map((dot, i) =>\n    <Item key={i} i={i} speed={speed} dot={dot} oldLength={oldLength} />\n  )\n  return <div>{snake}</div>\n}\n\n","import React from 'react';\nimport c from './Food.module.css';\n\nexport const Food = ({ food }) => {\n  return <div\n    className={c.Food_dot}\n    style={{\n      left: `${food[0]}%`,\n      top: `${food[1]}%`\n    }}\n  />\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Snake, Food } from \"./components/uiKit\";\n\nconst UP = 'UP'\nconst DOWN = 'DOWN'\nconst RIGHT = 'RIGHT'\nconst LEFT = 'LEFT'\n \nconst MAP_SIZE = 500\nconst SPEED = 200\n\nconst getRandomCoordinates = () => {\n  let max = MAP_SIZE / 5;\n  let x = Math.floor((Math.random() * (max)) / 5) * 5;\n  let y = Math.floor((Math.random() * (max)) / 5) * 5;\n  return [x, y]\n}\n\nconst EntryState = {\n  snake: {\n    direction: RIGHT,\n    speed: SPEED,\n    oldLength: [\n      [0, 0],\n      [0, 0],\n    ],\n    length: [\n      [0, 0],\n      [5, 0],\n    ],\n  },\n  items: {\n    food: getRandomCoordinates()\n  }\n}\n\nconst copyObj = (obj) => {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nexport class App extends Component {\n\n  state = copyObj(EntryState)\n\n  componentDidMount() {\n    alert(\"Начать игру\")\n    setInterval(() => this._mouveSnake(), this.state.snake.speed)\n    document.onkeydown = this._onKeyDown\n  }\n\n  componentDidUpdate() {\n    this._checkBorder()\n    this._checkSnakeCollapse()\n    this._eatFood()\n  }\n\n  _checkBorder() {\n    const { snake: { length } } = this.state\n    const head = length[length.length - 1]\n    if (\n      (head[0] >= MAP_SIZE / 5) ||\n      (head[1] >= MAP_SIZE / 5) ||\n      (head[0] < 0) ||\n      (head[1] < 0)\n    ) {\n      this._gameOver()\n    }\n  }\n\n  _checkSnakeCollapse() {\n    let length = [...this.state.snake.length]\n    const head = length[length.length - 1]\n    length.pop()\n    length.forEach((item) => {\n      if (item[0] === head[0] && item[1] === head[1]) {\n        this._gameOver()\n      }\n    })\n  }\n\n  _eatFood() {\n    const { items: { food } } = this.state\n    let length = [...this.state.snake.length]\n    let oldLength = [...this.state.snake.oldLength]\n    const head = length[length.length - 1]\n\n    if (food[0] === head[0] && food[1] === head[1]) {\n      length.unshift(oldLength[0])\n      oldLength.unshift(oldLength[0])\n      this.setState({\n        items: { food: getRandomCoordinates() },\n        snake: { ...this.state.snake, length: length, oldLength:oldLength }\n      })\n    }\n  }\n\n  _onKeyDown = (e) => {\n    e = e || window.event\n    const { snake: { direction } } = this.state\n    let newDirection\n\n    switch (e.keyCode) {\n      case 38: {\n        newDirection = direction !== DOWN ? (UP) : (DOWN)\n        break\n      }\n      case 40: {\n        newDirection = direction !== UP ? (DOWN) : (UP)\n        break\n      }\n      case 39: {\n        newDirection = direction !== LEFT ? (RIGHT) : (LEFT)\n        break\n      }\n      case 37: {\n        newDirection = direction !== RIGHT ? (LEFT) : (RIGHT)\n        break\n      }\n      default: { newDirection = direction }\n    }\n    this.setState({ snake: { ...this.state.snake, direction: newDirection } })\n  }\n\n  _mouveSnake() {\n    const { snake: { direction, length } } = this.state\n    let newLength = [...this.state.snake.length]\n    let head = length[length.length - 1]\n\n    switch (direction) {\n      case UP: {\n        head = [head[0], head[1] - 5]\n        break\n      }\n      case DOWN: {\n        head = [head[0], head[1] + 5]\n        break\n      }\n      case RIGHT: {\n        head = [head[0] + 5, head[1]]\n        break\n      }\n      case LEFT: {\n        head = [head[0] - 5, head[1]]\n        break\n      }\n    }\n\n    newLength.push(head)\n    newLength.shift()\n\n    this.setState({\n      snake:\n      {\n        ...this.state.snake,\n        length: newLength,\n        oldLength: length\n      }\n    })\n  }\n\n\n  _gameOver() {\n    alert(`Ты проиграл\\n Счет: ${this.state.snake.length.length}`)\n    this.setState(copyObj(EntryState))\n  }\n\n  render() {\n    const {\n      snake: { \n        length, \n        oldLength, \n        speed \n      },\n      items: { food }\n    } = this.state\n\n    return (\n      <div className=\"App\">\n        <div\n          className=\"Map\"\n          style={{ width: `${MAP_SIZE}px`, height: `${MAP_SIZE}px` }}\n        >\n          <Snake speed={speed} oldLength={oldLength} length={length} />\n          <Food food={food} />\n        </div>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}